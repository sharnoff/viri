//! A place for macro definitions used within the code surrounding `View`s

/// Generates all of the boilerplate code for use in the 'views' module file
///
/// Specificially, given an input that looks something like:
/// ```
/// pub enum ViewKind {
///     File: file::View,
///     FileTree: filetree::View,
///     // ...
/// }
/// ```
/// the macro will generate a corresponding enum `ViewKind` whose variants are all empty,
/// with names given by the first argument.
#[macro_export]
macro_rules! viewkind {
    (
        $vis:vis enum ViewKind {
            $($kind:ident : $typ:ty,)+
        }
    ) => {
        /// An enum over the different types of `View`s
        ///
        /// This is generated by the `viewkind!` macro
        #[derive(Copy, Clone, Debug, PartialEq, Eq, serde::Deserialize, serde::Serialize)]
        $vis enum ViewKind {
            $($kind,)+
        }
    }
}
