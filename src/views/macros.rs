//! A place for macro definitions used within the code surrounding `View`s

/// Generates all of the boilerplate code for use in the 'views' module file
///
/// Specificially, given an input that looks something like:
/// ```
/// pub enum ViewKind {
///     File: file::FileView,
///     Help: help::HelpView,
///     // ...
/// }
/// ```
/// the macro will generate a corresponding enum `ViewKind` whose variants are all empty,
/// with names given by the first argument. The `ViewKind` enum supports two key
/// operations: Deserialization (both directly from a string and through the `Deserialize`
/// trait), and conversion into a view via the `to_view` method.
///
/// The source is actually quite simple; it shouldn't be hard to understand.
#[macro_export]
macro_rules! viewkind {
    (
        $vis:vis enum ViewKind {
            $($kind:ident : $typ:ty,)+
        }
    ) => {
        /// An enum over the different types of `View`s
        ///
        /// This is generated by the `viewkind!()` macro, which is *very* understandable, so if you
        /// are creating your own `View` or doing anything similar, it's worth reading.
        #[derive(Copy, Clone, Debug, PartialEq, Eq, serde::Deserialize)]
        $vis enum ViewKind {
            $($kind,)+
        }

        impl ViewKind {
            /*
            /// Generates the enum from a string
            ///
            /// This is provided *in addition* to `Deserialize` to allow more versatile usage
            fn from_string<S: AsRef<str>>(s: S) -> Option<ViewKind> {
                match s.as_ref() {
                    $(stringify!($kind) => Some(ViewKind::$kind),)+
                    _ => None,
                }
            }
            */

            /// Constructs the `View` corresponding to the variant of the `ViewKind`
            pub fn to_view<S: AsRef<str>>(self, size: TermSize, args: &[S]) -> Box<dyn ConcreteView> {
                match self {
                    $(Self::$kind => Box::new(<$typ as ConstructedView>::init(size, args))),+
                }
            }
        }
    }
}
